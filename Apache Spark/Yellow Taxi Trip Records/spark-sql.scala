// Databricks notebook source
//Problem Statement:
//This case study shows real-world example of how to use Spark-SQL on top of the HADOOP for different exploratory data analysis.
//In here, we have a predefined dataset (yellow_tripdata_2015-01-06.csv) having more than 15 columns.
// We perform taxi trip analysis by solving the some questions

// COMMAND ----------

// loading the dataset
val df = spark
        .read
        .format("csv")
        .option("header","true")
        .option("mode","failfast")
        .option("inferschema","true")
        .load("/FileStore/tables/yellow.csv")

// COMMAND ----------

df.show // Viewing data

// COMMAND ----------

df.printSchema  //printing schema

// COMMAND ----------

df.count //Number of records

// COMMAND ----------

df.createOrReplaceTempView("taxi") //created a temporary view

// COMMAND ----------

//Total number of trips ( equal to the number of rows)
spark.sql("select count(*) from taxi").show

// COMMAND ----------

//Calculating the total revenue generated by all the trips. The fare is stored in the column total_amount.
spark.sql ("select sum(total_amount) as TotalAmount from taxi").show

// COMMAND ----------

//Calculating the fraction of the total paid for tolls. The toll is stored in tolls_amount.
spark.sql("select sum(tolls_amount)/sum(total_amount) as Total_Paid_For_Tolls from taxi").show

// COMMAND ----------

//Calculating the fraction of it as driver tips? The tip is stored in tip_amount.
spark.sql("select sum(tip_amount)/sum(total_amount) as Total_Paid_For_Tips from taxi").show

// COMMAND ----------

// The average trip amount
spark.sql(" select avg(total_amount) as Avg_Trip_Amount from taxi").show

// COMMAND ----------

//Calculating the average distance of the trips. Distance is stored in the column trip_distance.
spark.sql(" select avg(trip_distance) as Avg_Trip_Dist from taxi").show

// COMMAND ----------

// Different payment types are used 
spark.sql("select distinct(payment_type) as Payment_Type from taxi").show

// COMMAND ----------

//For each payment type, calculating the following details:
//Average fare generated
//Average tip
//Average tax â€“ tax is stored in column mta_tax

spark.sql("""select payment_type, avg(fare_amount) as Avg_FareAmount, 
          avg(tip_amount) as Avg_TipAmount,avg(mta_tax) as Avg_Tax 
          from taxi group by payment_type""").show

// COMMAND ----------

//On average calculating which hour of the day generates the highest revenue
spark.sql("""select h24 as hour, avg(total_amount) as Avg_Revenue 
             from (select hour(tpep_pickup_datetime) as h24, 
             total_amount from taxi) group by h24 order by Avg_Revenue desc""").show
